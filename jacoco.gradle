apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.8"
}

def coverageDirs = [
        "src/main/java",
        "$buildDir/tmp/kotlin-classes/debug",
        "$buildDir/intermediates/classes/debug"
]

def coverageFilter = [
        '**/R.class',
        '*/R$.class',
        '*/$ViewInjector*.*',
        '*/$ViewBinder*.*',
        '*/BuildConfig.',
        '*/Manifest.*'
]

def kotlinClasses = fileTree(
        dir: "$buildDir/tmp/kotlin-classes/debug",
        exclude: coverageFilter
)

def javaClasses = fileTree(
        dir: "$buildDir/intermediates/classes/debug",
        exclude: coverageFilter
)

task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoCoverageReport') {
    classDirectories.setFrom(files([javaClasses, kotlinClasses]))
    additionalSourceDirs.setFrom(coverageDirs)
    sourceDirectories.setFrom(coverageDirs)
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec'
    ]))

    violationRules {
        failOnViolation = true
        rule {
            limit {
                minimum = 0.00
            }
        }
    }
}

task jacocoCoverageReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        csv.enabled false
        xml.enabled false
        html {
            enabled true
            destination file("$buildDir/reports/jacoco")
        }
    }
    classDirectories.setFrom(files([javaClasses, kotlinClasses]))
    additionalSourceDirs.setFrom(coverageDirs)
    sourceDirectories.setFrom(coverageDirs)
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec'
    ]))
}